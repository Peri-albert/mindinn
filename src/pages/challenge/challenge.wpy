<style lang="less">
page {
	background-color: #f2f2f2;

	.lineOverEllipsis {
		display: block;
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
	}
	.flexCenter {
		align-items: center;
		display: flex;
		justify-content: center;
	}

	.layer-wrapper {
		background-color: rgba(0, 0, 0, .333);
		height: 100vh;
		left: 0;
		overflow: hidden;
		position: fixed;
		top: 0;
		width: 100vw;
		z-index: 1010;

		.layer-bg {
			height: 100%;
			margin-bottom: -100vh;
			width: 100%;
		}
	}

	.container {
		align-items: center;
		box-sizing: border-box;
		display: flex;
		height: 100vh;
		justify-content: center;
		width: 100vw;

		view {
			animation: shaking linear .7s alternate infinite;
			text-align: center;
			width: 100%;
		}
	}

	@keyframes shaking {
		0% {transform: rotate(-10deg)}
		100% {transform: rotate(10deg)}
	}
}
</style>
<template>
	<view class="container">
		<view>暂时没有聊天消息噢~</view>
	</view>
	<bottomnavi :current.sync="current"></bottomnavi>
	<apply-scope></apply-scope>
</template>
<script>
import wepy from 'wepy'
const app = getApp()
import BottomNavi from '../../components/bottom_navi'
import ApplyScope from '../../components/apply_scope'

export default class Challenge extends wepy.page {
	config = {
		navigationBarTitleText: "聊天"
	}
	components = {
		bottomnavi: BottomNavi,
		"apply-scope": ApplyScope,
	}

	data = {
		current: 'challenge',
		isiPhoneUser: false,

		searchOptions: {
			sex: 'any',
			distance: 50,
			tags: []
		},

		viewFriendPageUserId: 0,
		processCount: 0,
		triggerCompleteProfileCount: 1,
		isProfileInitialized: true,
		likeLayerShow: false, //配对成功弹窗显隐
		finishDataTipShow: false, //完善资料弹窗显隐
		shareTipShow: false, //转发提示弹窗显隐
		pickedUser: {},
		curUser: {},
		selfInfo: '',
		hasChosen: false,
		processCountStart: 0,
		closeActionShow: false, //关闭操作弹窗显隐
		directionShow: false, //首次引导层显隐
		limitTipShow: false, //上限提醒弹窗显隐
		shareTipInfo: {},
		barrages: [],  //弹幕数组
		danmuBtnShow: false,
		danmuInputShow: false,
		danmuInputValue: '',
		enableMP: false,
		showGift: false,
		selectGiftId: 0,
		userId: 0,
	}

	events = {
		'add-images': () => {
			console.log('receive add-images, load more user')
			this.loadNextUsers();
		},
		'like-item': (user) => {
			console.log(`like ${user.id} - ${user.name}`)

			UserService.likeUser(user.id, {
				hideLoading: true
			}).then(resp => {
				console.warn(resp);
				if (resp.isSuccess) {
					if (resp.isMutualLike) {
						console.warn('mutual like');
						this.showMutualLikeModal(user.id);
					}
					this.updateProcessCount();
				}
			})

			UserService.getUserInfo(user.id).then(userInfo => {
				console.log('当前喜欢user userInfo', userInfo)
				if (userInfo.source == 'opuser') {
					UserService.tellRobotReplay(user.id, this.selfInfo.id)
				}
			})
			
			app.aldstat.sendEvent("喜欢", {
				"用户ID": this.selfInfo.id + "",
				"时间": _.getAldTime()
			})
		},
		'dislike-item': (user) => {
			console.log(`dislike ${user.id} - ${user.name}`);
			UserService.dislikeUser(user.id).then(isSuccess => {
				if (isSuccess) {
					this.updateProcessCount();
				}
			});
			app.aldstat.sendEvent("不喜欢", {
				"用户ID": this.selfInfo.id + "",
				"时间": _.getAldTime()
			})
		},
		'tap-item': (user) => {
			this.viewFriendPageUserId = user.id;
			app.aldstat.sendEvent("从泡一泡查看用户", {
				"用户ID": this.selfInfo.id + "",
				"时间": _.getAldTime()
			})

			wx.navigateTo({
				url: '/pages/paoypao/paoypao_friend?source=paoypao&id=' + user.id
			})
		},
		'focus-user': (user) => {
			this.curUser = user;
		},
		'trigger-perfecting': () => {
			this.finishDataTipShow = true
		}
	}

	methods = {
		doNothing() {},
		async onTapChat() {
			let cid = this.curUser.id;
			if (this.isiPhoneUser) {
				wx.navigateTo({
					url: '/package/pages/chatroom/chatroom?touserid=' + cid,
				})
				return;
			}

			if (this.enableMP) {
				if (this.selfInfo.sex == "female") {
					wx.navigateTo({
						url: '/package/pages/chatroom/chatroom?touserid=' + cid,
					})
					return;
				}

				let data = await UserService.getUserPrivateChatPermission(cid);
				if (data.private_chat_permission) {
					wx.navigateTo({
						url: '/package/pages/chatroom/chatroom?touserid=' + cid,
					})
					return;
				}

				let accostRes = await GiftService.hasAccostUser(cid);
				if (accostRes.is_accost) {
					wx.navigateTo({
						url: '/package/pages/chatroom/chatroom?touserid=' + cid,
					})
					return;
				}

				MP.sendGift({
					userId: cid,
					page: 'tab',
					showTitle: false,
					complete: (success = false, gift = null) => {
						this.showGift = false;
						this.selectGiftId = 0;
						if (success) {
							app.aldstat.sendEvent("完成泡TA", {
								"用户ID": this.selfInfo.id + "",
								"时间": _.getAldTime()
							})
							GiftService.accostUser(cid);
							if (gift) {
                                WebIMService.sendGiftMsg(cid, gift.name, this.selfInfo)
							}
							wx.navigateTo({
								url: '/package/pages/chatroom/chatroom?touserid=' + cid,
							})
						}
					}
				});
			} else {
				wx.navigateTo({
					url: '/package/pages/chatroom/chatroom?touserid=' + this.curUser.id,
				})
			}
		},
		//筛选按钮
		tapToPick() {
			const ID = AccountService.getSelfId()
			app.aldstat.sendEvent("泡一泡选择搜索条件进行搜索", {
				"用户ID": ID + "",
				"时间": _.getAldTime()
			})
			let initTagIds = this.searchOptions.tags.map(tag => {
				return tag.id;
			})
			initTagIds = JSON.stringify(initTagIds);
			let pageUrl = `/pages/paoypao/paoypao_pick?sex=${this.searchOptions.sex}&distance=${this.searchOptions.distance}&tag_ids=${initTagIds}`;
			console.warn(pageUrl);
			wx.navigateTo({
				url: pageUrl
			})
		},
		//不喜欢按钮
		tapDislike() {
			if (this.hasChosen) return;
			this.hasChosen = true
			this.$invoke('tantan', 'likeOrNot', 'dislike')
		},
		//喜欢按钮
		tapLike() {
			if (!this.isProfileInitialized) {
				this.finishDataTipShow = true
				this.$apply();
				return;
			}
			if (this.hasChosen) return;
			this.hasChosen = true
			this.$invoke('tantan', 'likeOrNot', 'like')
		},
		//发送消息
		tapSendMessage() {
			wx.navigateTo({
				url: `/package/pages/chatroom/chatroom?touserid=${this.pickedUser.id}`
			})
		},
		//继续泡一泡
		tapContinuePao() {
			this.likeLayerShow = false
		},
		//关闭公共遮罩层
		tapRest() {
			this.finishDataTipShow = false
			this.shareTipShow = false
			this.limitTipShow = false
		},
		//去完善按钮
		tapToFinishData() {
			this.finishDataTipShow = false
			wx.navigateTo({
				url: '/pages/profile/perfecting_data'
			})
		},
		//上限提示弹窗
		tapTipUpperLimit() {
			this.limitTipShow = true
		},
		//关闭首次引导层
		tapCloseDirection() {
			this.directionShow = false
		},
		//弹幕按钮显隐
		tapShowDanmuBtn() {
			this.danmuBtnShow = !this.danmuBtnShow
		},
		//弹幕显隐
		danmuSwitch(e) {
			this.$broadcast('show-danmu', e.detail.value)
		},
		//弹幕输入框显隐
		tapCloseDanmuInput() {
			this.danmuInputShow = false
			this.danmuInputValue = ''
		},
		tapShowDanmuInput() {
			this.danmuInputShow = true
			this.danmuBtnShow = false
		},
		getDanmuInput(e) {
			this.danmuInputValue = e.detail.value
		},
		//发送弹幕
		tapSendDanmu() {
			if (!this.danmuInputValue.length) return;
			const value = this.danmuInputValue
			this.danmuInputShow = false
			this.danmuInputValue = ''
			this.$invoke('tantan', 'addDanmu', this.selfInfo, value)
			AccountService.putDanmu(this.curUser.id, value)
		}
	}

	forwardNextDistance() {
		if (this.searchOptions.distance == 50) {
			this.searchOptions.distance = 100;
		} else if (this.searchOptions.distance == 100) {
			this.searchOptions.distance = 3000;
		}
	}

	updateProcessCount() {
		this.processCount += 1
		Session.setKey("paopao_process_count", this.processCount);

		// if (!this.isProfileInitialized) {
		// 	if (this.processCount >= this.triggerCompleteProfileCount) {
		// 		this.finishDataTipShow = true
		// 		this.$apply();
		// 		console.log('因为没有完善资料，所以再次弹出显示')
		// 	}
		// }
		// 除首次进入滑10触发完善资料每滑30，70，100次均触发一次转发
		if (0 > 1) {
			this.finishDataTipShow = true
			this.$apply();
		} else if (this.processCount == this.processCountStart + 30) {
			this.shareTipInfo = {
				txts: ['你是魔鬼吗？', '这么快就划了30个！', '给个小心心，分享一下吧！'],
				Truebtn_txt: '给小心心',
				Falsebtn_txt: '不给 继续玩'
			}
			this.shareTipShow = true
			this.$apply();
		} else if (this.processCount == this.processCountStart + 100) {
			this.shareTipInfo = {
				txts: ['这么厉害你咋不上天？', '叫上小伙伴一起来泡泡吧！'],
				Truebtn_txt: '召唤小伙伴',
				Falsebtn_txt: '不要 自己玩'
			}
			this.shareTipShow = true
			this.$apply();
		} else if (this.processCount == this.processCountStart + 200) {
			this.shareTipInfo = {
				txts: ['你这样的手速，我们真的很难沟通。', '请冷静120min，为你推荐更多！'],
				Truebtn_txt: '分享',
				Falsebtn_txt: '先冷静一下'
			}
			this.shareTipShow = true
			this.closeActionShow = true
			this.$apply()
			Session.setKey("paoypao__ActionOver", true)
		}
	}

	async showMutualLikeModal(userId) {
		let userinfo = await UserService.getUserInfo(userId);
		this.pickedUser.coverPicUrl = userinfo.avatar;
		this.pickedUser.username = userinfo.name;
		this.pickedUser.id = userId;
		this.likeLayerShow = true;
		this.$apply();
		let tags = await TagService.getUserTags(userId);
		let tagArray = [];
		tags.forEach(tag => {
			tagArray.push(tag.name);
		});
		setTimeout(() => {
			WxNotifyService.sendMatchNofitication(userId, this.selfInfo.id, userinfo.name, tagArray.toString());
		}, 1000);
	}

	loadNextUsers(reset) {
		let tagIds = this.searchOptions.tags.map(tag => {
			return tag.id;
		})
		console.log('开始获取数据')
		AccountService.getNearbyUsers(reset, this.searchOptions.distance, this.searchOptions.sex, tagIds).then(async users => {
			console.log('users>>>>>>>>>>>>>>>>>>>>>>>>>>>', users)
			if (users == null) {
				return;
			}
			
			if (users.length == 0) {
				if (reset) {
					this.$invoke('tantan', 'resetUsers', [])
				} else {
					this.$invoke('tantan', 'addUsers', [])
				}
				this.forwardNextDistance()
				setTimeout(() => {
					this.loadNextUsers()
				})

				return
			}
			let newUsers = [];
			let userIds = [];
			let tos = [];

			users.forEach(user => {
				newUsers.push({
					id: user.id,
					picNum: 0,
					coverPicUrl: user.avatar,
					username: user.name,
					lat: user.latitude,
					lng: user.longitude,
					distance: user.distance ? user.distance : "...",
					sex: user.sex,
					age: user.age,
					asterism: DateService.getAsterism(user.birthday),
					address: user.region,
					isVisitSameBar: false,
					x: 0, //左滑右滑效果所用坐标初始化
					y: 0
				})

				userIds.push(user.id);
				tos.push({
					latitude: user.latitude,
					longitude: user.longitude
				})
			});

			if (reset) {
				this.$invoke('tantan', 'resetUsers', newUsers)
			} else {
				this.$invoke('tantan', 'addUsers', newUsers)
			}
			// LocationService.calculateDistance(tos).then((key2distance) => {
			// 	this.$invoke('tantan', 'updateDistances', key2distance)
			// })

			UserService.getImageCounts(userIds).then(user2count => {
				this.$invoke('tantan', 'updateImageCount', user2count)
			})

			UserService.getVisitSameBarUsers(userIds).then(targetUserIds => {
				this.$invoke('tantan', 'updateVisitSameBarUsers', targetUserIds)
			})

			UserService.getUserVisits(userIds).then(user2visits => {
				this.$invoke('tantan', 'updateUserVisits', user2visits)
			})	

			this.getAddressByCoordinate(tos, true);
		})
	}

	onLoad(e) {
		wx.hideTabBar({})
		this.isiPhoneUser = StorageService.get('isiPhoneUser');
		this.userId = AccountService.getSelfId();

		// 被拉黑用户直接清除缓存重定向至登录页面
		AccountService.checkUserBlock().then(
			data => {
				if (data.is_block) {
					Session.clear();
					wx.redirectTo({
						url: '/pages/login/login'
					});
				}
			}
		)
		
		UserService.getUserInfo().then(userInfo => {
			this.enableMP = userInfo.enable_mpcoin;
			if (userInfo.sex == 'female') {
				this.searchOptions.sex = 'male';
			} else {
				this.searchOptions.sex = 'female'
			}
			this.selfInfo = userInfo;
			this.$apply();
			this.loadNextUsers(true);
		})
		this.loadNextUsers(true)

		LocationService.reportLocation();
	}

	onShow() {
		MP.bind(this);
		this.hasChosen = false;
		this.$broadcast('update-bottom-navi');

		try {
			let finished_profile = wx.getStorageSync('finished_profile');
			if (finished_profile) {
				this.isProfileInitialized = true;
				this.$apply();
				wx.removeStorage({
					key: 'finished_profile',
					success (res) {
						console.log(res.data)
					}
				})
			} else {
				UserService.isProfileInitialized().then(isInitialized => {
					this.isProfileInitialized = isInitialized;
					this.$apply();
				});
			}
		} catch (e) {
			console.log(e)
		}
		if (this.isProfileInitialized) {
			this.$invoke('tantan', 'updateProfileInitialized');
		}

		Session.getKey('paoypao_directionShowed') ? '' : Session.setKey('paoypao_directionShowed', true)
		
		this.$broadcast('apply-scope', {
			scope: 'scope.userLocation',
			title: '享趣社区需要您的位置信息，以为您推荐合适的Ta，请授权位置信息'
		}, () => {
			let isReturnFromApplyScope = StorageService.getAndClear("is_return_from_apply_scope");
			if (isReturnFromApplyScope) {
				console.warn("load next users true")
				this.loadNextUsers(true);
			}

			let searchOptions = StorageService.getAndClear("pao_search_options");
			if (searchOptions) {
				this.searchOptions = searchOptions;
				this.loadNextUsers(true);
			}

			let friendPageAction = StorageService.getAndClear('paoypao_friend_action');
			if (friendPageAction) {
				let items = friendPageAction.split('_');
				let action = items[0];
				let userId = parseInt(items[1]);
				if (this.viewFriendPageUserId == userId) {
					setTimeout(() => {
						this.$invoke('tantan', 'likeOrNot', action)
					}, 300)
					setTimeout(() => {
						let isMutualLike = StorageService.getAndClear('paoypao_friend_mutual_like')
						if (isMutualLike) {
							this.showMutualLikeModal(userId);
						}
					}, 600)
				}
			}
		});
	}

	async getAddressByCoordinate(tos, flag) {
		let cc = [...tos];
		if (flag) {
			LocationService.getAddressByCoordinate(cc).then(
				async data => {
					let keys = Object.keys(data);
					if (keys.length > 0) {
						this.$invoke('tantan', 'updateAddress', data)
					}
					if (keys.length < cc.length) {
						for (let i=0; i<keys.length; i++) {
							let lat = keys[i].split("_")[0];
							let lng = keys[i].split("_")[1];
							let item = {
								"latitude": lat,
								"longitude": lng
							}
							let index = cc.indexOf(item);
							cc.splice(index, 1);
						}
						let coordAddressData = [];

						for (let i=0; i<5; i++) {
							if (cc.length > 0) {
								let c = cc.shift();
								let data = await LocationService.getLocationInfoByCoordinate(c);
								this.$invoke('tantan', 'updateAddress', data);
								let key = `${c.latitude}_${c.longitude}`
								coordAddressData.push({
									"latitude": c.latitude,
									"longitude": c.longitude,
									"address": data[key]
								})
							} else {
								break;
							}
						}

						LocationService.updateCoordinateAddress(coordAddressData);

						if (cc.length > 0) {
							setTimeout(() => {
								this.getAddressByCoordinate(cc, false);
							}, 1080);
						}
					}
				}
			)
		} else {
			let coordAddressData = [];

			for (let i=0; i<5; i++) {
				if (cc.length > 0) {
					let c = cc.shift();
					await LocationService.getLocationInfoByCoordinate(c).then(
						(data) => {
							this.$invoke('tantan', 'updateAddress', data);
							let key = `${c.latitude}_${c.longitude}`
							coordAddressData.push({
								"latitude": c.latitude,
								"longitude": c.longitude,
								"address": data[key]
							})
						}
					)
				} else {
					break;
				}
			}

			LocationService.updateCoordinateAddress(coordAddressData);

			if (cc.length > 0) {
				setTimeout(() => {
					this.getAddressByCoordinate(cc, false);
				}, 1080);
			}
		}
	}

	onShareAppMessage(e) {
		this.shareTipShow = false
		this.$apply()
		return {
			title: '原来高颜值小姐姐/小哥哥们都在这里......',
			path: '/pages/login/login',
			imageUrl: 'https://vxiaocheng-jh.oss-cn-beijing.aliyuncs.com/mercury/paoypao/shareAppMessagePic.jpg'
		}
	}

	finishRefresh() {}

	onPullDownRefresh() {}

	onReachBottom() {}
}
</script>